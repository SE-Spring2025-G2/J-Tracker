import json
import pytest
import mongomock
from flask_mongoengine import MongoEngine
from backend.app import create_app, db, Users
from flask import url_for
from io import BytesIO
from mongoengine import disconnect

def setup_module(module):
    """Setup the Flask test client"""
    global app, client

    disconnect(alias="default")

    app = create_app()
    app.config['TESTING'] = True
    app.config['WTF_CSRF_ENABLED'] = False
    
    
    app.config['MONGODB_SETTINGS'] = {
        'db': 'test_db',
        'host': 'localhost',
        'mongo_client_class': mongomock.MongoClient
    }

    client = app.test_client()
    
    db.init_app(app) 

    with app.app_context():
        db.connection.drop_database('test_db')  


# Test user signup
def test_signup():
    response = client.post(
        '/users/signup',
        data=json.dumps({
            "username": "testuser",
            "password": "password123",
            "fullName": "Test User"
        }),
        content_type='application/json'
    )
    assert response.status_code == 200
    assert "fullName" in response.json

# Test user login
def test_login():
    response = client.post(
        '/users/login',
        data=json.dumps({
            "username": "testuser",
            "password": "password123"
        }),
        content_type='application/json'
    )
    assert response.status_code == 200
    assert "token" in response.json

# Test getting user profile
def test_get_profile():
    token = get_auth_token()
    response = client.get('/getProfile', headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200
    assert "fullName" in response.json


# Test adding a job application
def test_add_application():
    token = get_auth_token()
    response = client.post(
        '/applications',
        data=json.dumps({
            "application": {
                "jobTitle": "Software Engineer",
                "companyName": "Test Corp",
                "status": "Applied"
            }
        }),
        headers={"Authorization": f"Bearer {token}"},
        content_type='application/json'
    )
    assert response.status_code == 200
    assert "jobTitle" in response.json


# Test getting job recommendations
def test_get_recommendations():
    token = get_auth_token()
    response = client.get('/getRecommendations', headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200

# Helper function to get an auth token
def get_auth_token():
    login_response = client.post(
        '/users/login',
        data=json.dumps({
            "username": "testuser",
            "password": "password123"
        }),
        content_type='application/json'
    )
    return login_response.json["token"]

# Test that the server is running and accessible.
def test_health_check():
    response = client.get('/')
    assert response.status_code == 200
    assert response.json["message"] == "Server up and running"

#  Tests if the API correctly handles sign-up requests missing required fields.
def test_signup_missing_fields():
    response = client.post(
        '/users/signup',
        data=json.dumps({
            "username": "testuser"
        }),
        content_type='application/json'
    )
    assert response.status_code == 400
    assert "error" in response.json

# Tests that login fails when incorrect credentials are provided.
def test_login_wrong_password():
    response = client.post(
        '/users/login',
        data=json.dumps({
            "username": "testuser",
            "password": "wrongpassword"
        }),
        content_type='application/json'
    )
    assert response.status_code == 400
    assert "error" in response.json

#  Tests if the API rejects resume uploads when no file is provided.
def test_upload_resume_no_file():
    token = get_auth_token()
    response = client.post(
        '/resume',
        headers={"Authorization": f"Bearer {token}"}
    )
    assert response.status_code == 400
    assert "error" in response.json

# Tests the API returns an appropriate error when attempting to retrieve a non-existent resume.
def test_get_resume_not_found():
    token = get_auth_token()
    response = client.get('/resume', headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 400
    assert "error" in response.json

# the search API endpoint is deprecated. this test has been removed
# # Tests search with no keywords
# def test_search_no_keywords():
#     response = client.get('/search')
#     assert response.status_code == 400
#     assert "error" in response.json

# Tests if logout is a success
def test_logout_success():
    token = get_auth_token()
    response = client.post(
        '/users/logout',
        headers={"Authorization": f"Bearer {token}"}
    )
    assert response.status_code == 200

# the search API endpoint is deprecated. this test has been removed
# # Tests for error code if search had no parameters
# def test_search_no_parameters():
#     response = client.get('/search')
#     assert response.status_code == 400
#     assert "error" in response.json

# Tests if the API correctly handles job application requests with missing fields.
def test_add_application_missing_fields():
    token = get_auth_token()
    response = client.post(
        '/applications',
        data=json.dumps({
            "application": {
                "jobTitle": "Software Engineer"
                # Missing "companyName" and "status"
            }
        }),
        headers={"Authorization": f"Bearer {token}"},
        content_type='application/json'
    )
    assert response.status_code == 400
    assert "error" in response.json

#Tests for error codde to get unauthorized applications
def test_get_applications_unauthorized():
    response = client.get('/applications')
    assert response.status_code == 401
    assert "error" in response.json

# Tests for invalid endpoint
def test_invalid_endpoint():
    response = client.get('/nonexistent_route')
    assert response.status_code == 404
    assert "error" in response.json

# Tests for duplicate username signups
def test_signup_duplicate_username():
    # First signup attempt
    client.post(
        '/users/signup',
        data=json.dumps({
            "username": "duplicateUser",
            "password": "password123",
            "fullName": "Duplicate User"
        }),
        content_type='application/json'
    )

    # Second signup attempt with the same username
    response = client.post(
        '/users/signup',
        data=json.dumps({
            "username": "duplicateUser",
            "password": "newpassword",
            "fullName": "New Name"
        }),
        content_type='application/json'
    )
    
    assert response.status_code == 400
    assert "error" in response.json

# Tests that the API rejects resume uploads if the content type is incorrect.
def test_upload_resume_wrong_content_type():
    token = get_auth_token()
    response = client.post(
        '/resume',
        data="This is not a file",
        headers={"Authorization": f"Bearer {token}", "Content-Type": "text/plain"}
    )
    assert response.status_code == 400
    assert "error" in response.json

# Tests that deleting a non-existent job application results in a proper error response.
def test_delete_nonexistent_application():
    token = get_auth_token()
    response = client.delete(
        '/applications/999999', 
        headers={"Authorization": f"Bearer {token}"}
    )
    assert response.status_code == 400 
    assert "error" in response.json

# Tests that fetching job recommendations without authentication returns an unauthorized error.
def test_get_recommendations_unauthorized():
    response = client.get('/getRecommendations')
    assert response.status_code == 401  
    assert "error" in response.json

if __name__ == '__main__':
    pytest.main()
